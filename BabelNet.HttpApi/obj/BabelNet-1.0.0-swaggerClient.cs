//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

#pragma warning disable 108 // Disable "CS0108 '{derivedDto}.ToJson()' hides inherited member '{dtoBase}.ToJson()'. Use the new keyword if hiding was intended."
#pragma warning disable 114 // Disable "CS0114 '{derivedDto}.RaisePropertyChanged(String)' hides inherited member 'dtoBase.RaisePropertyChanged(String)'. To make the current member override that implementation, add the override keyword. Otherwise add the new keyword."
#pragma warning disable 472 // Disable "CS0472 The result of the expression is always 'false' since a value of type 'Int32' is never equal to 'null' of type 'Int32?'
#pragma warning disable 1573 // Disable "CS1573 Parameter '...' has no matching param tag in the XML comment for ...
#pragma warning disable 1591 // Disable "CS1591 Missing XML comment for publicly visible type or member ..."

namespace BabelNet.HttpApi
{
    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class BabelNetApiClient 
    {
        private string _baseUrl = "https://babelnet.io/v6";
        private System.Net.Http.HttpClient _httpClient;
        private System.Lazy<Newtonsoft.Json.JsonSerializerSettings> _settings;
    
        public BabelNetApiClient(System.Net.Http.HttpClient httpClient)
        {
            _httpClient = httpClient; 
            _settings = new System.Lazy<Newtonsoft.Json.JsonSerializerSettings>(() => 
            {
                var settings = new Newtonsoft.Json.JsonSerializerSettings();
                UpdateJsonSerializerSettings(settings);
                return settings;
            });
        }
    
        public string BaseUrl 
        {
            get { return _baseUrl; }
            set { _baseUrl = value; }
        }
    
        protected Newtonsoft.Json.JsonSerializerSettings JsonSerializerSettings { get { return _settings.Value; } }
    
        partial void UpdateJsonSerializerSettings(Newtonsoft.Json.JsonSerializerSettings settings);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, string url);
        partial void PrepareRequest(System.Net.Http.HttpClient client, System.Net.Http.HttpRequestMessage request, System.Text.StringBuilder urlBuilder);
        partial void ProcessResponse(System.Net.Http.HttpClient client, System.Net.Http.HttpResponseMessage response);
    
        /// <returns>Object containing version number</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<Response> GetVersionAsync()
        {
            return GetVersionAsync(System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <returns>Object containing version number</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<Response> GetVersionAsync(System.Threading.CancellationToken cancellationToken)
        {
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/getVersion");
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(Response);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="lemma">The word to search for.</param>
        /// <param name="searchLang">The language of the word. Accepts multiple values.</param>
        /// <param name="targetLang">The languages in which the data are to be retrieved.
        /// 
        /// Default value is the search language and accepts not more than 3 languages except the search language.</param>
        /// <param name="pos">Returns only the synsets containing this part of speech (NOUN, VERB, etc). Accepts multiple values.</param>
        /// <param name="source">Returns only the synsets containing these sources (WIKT, WIKIDATA, etc). Accepts multiple values.</param>
        /// <returns>search results matching criteria</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SynsetId>> GetSynsetIdsAsync(string lemma, System.Collections.Generic.IEnumerable<string> searchLang, System.Collections.Generic.IEnumerable<string> targetLang, UniversalPOS? pos, string source)
        {
            return GetSynsetIdsAsync(lemma, searchLang, targetLang, pos, source, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="lemma">The word to search for.</param>
        /// <param name="searchLang">The language of the word. Accepts multiple values.</param>
        /// <param name="targetLang">The languages in which the data are to be retrieved.
        /// 
        /// Default value is the search language and accepts not more than 3 languages except the search language.</param>
        /// <param name="pos">Returns only the synsets containing this part of speech (NOUN, VERB, etc). Accepts multiple values.</param>
        /// <param name="source">Returns only the synsets containing these sources (WIKT, WIKIDATA, etc). Accepts multiple values.</param>
        /// <returns>search results matching criteria</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SynsetId>> GetSynsetIdsAsync(string lemma, System.Collections.Generic.IEnumerable<string> searchLang, System.Collections.Generic.IEnumerable<string> targetLang, UniversalPOS? pos, string source, System.Threading.CancellationToken cancellationToken)
        {
            if (lemma == null)
                throw new System.ArgumentNullException("lemma");
    
            if (searchLang == null)
                throw new System.ArgumentNullException("searchLang");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/getSynsetIds?");
            urlBuilder_.Append(System.Uri.EscapeDataString("lemma") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lemma, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            foreach (var item_ in searchLang) { urlBuilder_.Append(System.Uri.EscapeDataString("searchLang") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            if (targetLang != null) 
            {
                foreach (var item_ in targetLang) { urlBuilder_.Append(System.Uri.EscapeDataString("targetLang") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pos != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pos, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (source != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("source") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SynsetId>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response2>("There is an error with one or more parameters in the request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<SynsetId>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">The id of the Synset you want to retrieve</param>
        /// <param name="targetLang">The languages in which the data are to be retrieved.
        /// 
        /// Default value is the English and accepts not more than 3 languages except the default language.</param>
        /// <returns>The Synset with the given id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Synset>> GetSynsetAsync(string id, System.Collections.Generic.IEnumerable<string> targetLang)
        {
            return GetSynsetAsync(id, targetLang, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The id of the Synset you want to retrieve</param>
        /// <param name="targetLang">The languages in which the data are to be retrieved.
        /// 
        /// Default value is the English and accepts not more than 3 languages except the default language.</param>
        /// <returns>The Synset with the given id</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Synset>> GetSynsetAsync(string id, System.Collections.Generic.IEnumerable<string> targetLang, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/getSynset?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (targetLang != null) 
            {
                foreach (var item_ in targetLang) { urlBuilder_.Append(System.Uri.EscapeDataString("targetLang") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Synset>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response2>("There is an error with one or more parameters in the request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Synset>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="lemma">The word to search for.</param>
        /// <param name="searchLang">the language of the word.</param>
        /// <param name="targetLang">The languages in which the data are to be retrieved.
        /// 
        /// Default value is the search language and accepts not more than 3 languages except the search language.</param>
        /// <param name="pos">Returns only the synsets containing this part of speech (NOUN, VERB, etc). Accepts multiple values.</param>
        /// <param name="source">Returns only the synsets containing these sources (WIKT, WIKIDATA, etc). Accepts multiple values.</param>
        /// <returns>Senses for the given word</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetSensesResponseItem>> GetSensesAsync(string lemma, string searchLang, System.Collections.Generic.IEnumerable<string> targetLang, UniversalPOS? pos, string source)
        {
            return GetSensesAsync(lemma, searchLang, targetLang, pos, source, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="lemma">The word to search for.</param>
        /// <param name="searchLang">the language of the word.</param>
        /// <param name="targetLang">The languages in which the data are to be retrieved.
        /// 
        /// Default value is the search language and accepts not more than 3 languages except the search language.</param>
        /// <param name="pos">Returns only the synsets containing this part of speech (NOUN, VERB, etc). Accepts multiple values.</param>
        /// <param name="source">Returns only the synsets containing these sources (WIKT, WIKIDATA, etc). Accepts multiple values.</param>
        /// <returns>Senses for the given word</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<GetSensesResponseItem>> GetSensesAsync(string lemma, string searchLang, System.Collections.Generic.IEnumerable<string> targetLang, UniversalPOS? pos, string source, System.Threading.CancellationToken cancellationToken)
        {
            if (lemma == null)
                throw new System.ArgumentNullException("lemma");
    
            if (searchLang == null)
                throw new System.ArgumentNullException("searchLang");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/getSenses?");
            urlBuilder_.Append(System.Uri.EscapeDataString("lemma") + "=").Append(System.Uri.EscapeDataString(ConvertToString(lemma, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("searchLang") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchLang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (targetLang != null) 
            {
                foreach (var item_ in targetLang) { urlBuilder_.Append(System.Uri.EscapeDataString("targetLang") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pos != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pos, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (source != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("source") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<GetSensesResponseItem>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response2>("There is an error with one or more parameters in the request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<GetSensesResponseItem>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">The id of the Synset you want to retrieve or the page title you want to search for</param>
        /// <param name="source">Returns only the synsets containing these sources (WIKT, WIKIDATA, etc).</param>
        /// <param name="searchLang">the language of the word.</param>
        /// <param name="targetLang">The languages in which the data are to be retrieved.
        /// 
        /// Default value is the search language and accepts not more than 3 languages except the search language.</param>
        /// <param name="pos">Returns only the synsets containing this part of speech (NOUN, VERB, etc). Accepts multiple values.</param>
        /// <param name="wnVersion">If the value of the parameter source is `WN` (WordNet), using this field allow to specify the WordNet version of the parameter id.</param>
        /// <returns>Responds with an array of one Synset that matches the given `id` parameter or an empty array if not found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Synset>> GetSynsetIdsFromResourceIDAsync(string id, string source, string searchLang, System.Collections.Generic.IEnumerable<string> targetLang, UniversalPOS? pos, string wnVersion)
        {
            return GetSynsetIdsFromResourceIDAsync(id, source, searchLang, targetLang, pos, wnVersion, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The id of the Synset you want to retrieve or the page title you want to search for</param>
        /// <param name="source">Returns only the synsets containing these sources (WIKT, WIKIDATA, etc).</param>
        /// <param name="searchLang">the language of the word.</param>
        /// <param name="targetLang">The languages in which the data are to be retrieved.
        /// 
        /// Default value is the search language and accepts not more than 3 languages except the search language.</param>
        /// <param name="pos">Returns only the synsets containing this part of speech (NOUN, VERB, etc). Accepts multiple values.</param>
        /// <param name="wnVersion">If the value of the parameter source is `WN` (WordNet), using this field allow to specify the WordNet version of the parameter id.</param>
        /// <returns>Responds with an array of one Synset that matches the given `id` parameter or an empty array if not found.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<Synset>> GetSynsetIdsFromResourceIDAsync(string id, string source, string searchLang, System.Collections.Generic.IEnumerable<string> targetLang, UniversalPOS? pos, string wnVersion, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            if (source == null)
                throw new System.ArgumentNullException("source");
    
            if (searchLang == null)
                throw new System.ArgumentNullException("searchLang");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/getSynsetIdsFromResourceID?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("source") + "=").Append(System.Uri.EscapeDataString(ConvertToString(source, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Append(System.Uri.EscapeDataString("searchLang") + "=").Append(System.Uri.EscapeDataString(ConvertToString(searchLang, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            if (targetLang != null) 
            {
                foreach (var item_ in targetLang) { urlBuilder_.Append(System.Uri.EscapeDataString("targetLang") + "=").Append(System.Uri.EscapeDataString(ConvertToString(item_, System.Globalization.CultureInfo.InvariantCulture))).Append("&"); }
            }
            if (pos != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("pos") + "=").Append(System.Uri.EscapeDataString(ConvertToString(pos, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            if (wnVersion != null) 
            {
                urlBuilder_.Append(System.Uri.EscapeDataString("wnVersion") + "=").Append(System.Uri.EscapeDataString(ConvertToString(wnVersion, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            }
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<Synset>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response2>("There is an error with one or more parameters in the request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<Synset>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        /// <param name="id">The id of the Synset</param>
        /// <returns>Edge (SynsetRelation) objects associated with the Synset</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SynsetRelation>> GetOutgoingEdgesAsync(string id)
        {
            return GetOutgoingEdgesAsync(id, System.Threading.CancellationToken.None);
        }
    
        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <param name="id">The id of the Synset</param>
        /// <returns>Edge (SynsetRelation) objects associated with the Synset</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public async System.Threading.Tasks.Task<System.Collections.Generic.ICollection<SynsetRelation>> GetOutgoingEdgesAsync(string id, System.Threading.CancellationToken cancellationToken)
        {
            if (id == null)
                throw new System.ArgumentNullException("id");
    
            var urlBuilder_ = new System.Text.StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/getOutgoingEdges?");
            urlBuilder_.Append(System.Uri.EscapeDataString("id") + "=").Append(System.Uri.EscapeDataString(ConvertToString(id, System.Globalization.CultureInfo.InvariantCulture))).Append("&");
            urlBuilder_.Length--;
    
            var client_ = _httpClient;
            try
            {
                using (var request_ = new System.Net.Http.HttpRequestMessage())
                {
                    request_.Method = new System.Net.Http.HttpMethod("GET");
                    request_.Headers.Accept.Add(System.Net.Http.Headers.MediaTypeWithQualityHeaderValue.Parse("application/json;charset=UTF8"));
    
                    PrepareRequest(client_, request_, urlBuilder_);
                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new System.Uri(url_, System.UriKind.RelativeOrAbsolute);
                    PrepareRequest(client_, request_, url_);
    
                    var response_ = await client_.SendAsync(request_, System.Net.Http.HttpCompletionOption.ResponseHeadersRead, cancellationToken).ConfigureAwait(false);
                    try
                    {
                        var headers_ = System.Linq.Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null)
                        {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }
    
                        ProcessResponse(client_, response_);
    
                        var status_ = ((int)response_.StatusCode).ToString();
                        if (status_ == "200") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<System.Collections.Generic.ICollection<SynsetRelation>>(response_, headers_).ConfigureAwait(false);
                            return objectResponse_.Object;
                        }
                        else
                        if (status_ == "400") 
                        {
                            var objectResponse_ = await ReadObjectResponseAsync<Response2>(response_, headers_).ConfigureAwait(false);
                            throw new ApiException<Response2>("There is an error with one or more parameters in the request", (int)response_.StatusCode, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else
                        if (status_ != "200" && status_ != "204")
                        {
                            var responseData_ = response_.Content == null ? null : await response_.Content.ReadAsStringAsync().ConfigureAwait(false); 
                            throw new ApiException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", (int)response_.StatusCode, responseData_, headers_, null);
                        }
            
                        return default(System.Collections.Generic.ICollection<SynsetRelation>);
                    }
                    finally
                    {
                        if (response_ != null)
                            response_.Dispose();
                    }
                }
            }
            finally
            {
            }
        }
    
        protected struct ObjectResponseResult<T>
        {
            public ObjectResponseResult(T responseObject, string responseText)
            {
                this.Object = responseObject;
                this.Text = responseText;
            }
    
            public T Object { get; }
    
            public string Text { get; }
        }
    
        public bool ReadResponseAsString { get; set; }
        
        protected virtual async System.Threading.Tasks.Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(System.Net.Http.HttpResponseMessage response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers)
        {
            if (response == null || response.Content == null)
            {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }
        
            if (ReadResponseAsString)
            {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try
                {
                    var typedBody = Newtonsoft.Json.JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else
            {
                try
                {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new Newtonsoft.Json.JsonTextReader(streamReader))
                    {
                        var serializer = Newtonsoft.Json.JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (Newtonsoft.Json.JsonException exception)
                {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }
    
        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo)
        {
            if (value is System.Enum)
            {
                string name = System.Enum.GetName(value.GetType(), value);
                if (name != null)
                {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType()).GetDeclaredField(name);
                    if (field != null)
                    {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field, typeof(System.Runtime.Serialization.EnumMemberAttribute)) 
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null)
                        {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }
                }
            }
            else if (value is bool) {
                return System.Convert.ToString(value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[])
            {
                return System.Convert.ToBase64String((byte[]) value);
            }
            else if (value != null && value.GetType().IsArray)
            {
                var array = System.Linq.Enumerable.OfType<object>((System.Array) value);
                return string.Join(",", System.Linq.Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }
        
            return System.Convert.ToString(value, cultureInfo);
        }
    }

    /// <summary>A short description of the meaning of a word</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Gloss 
    {
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        /// <summary>The WordNet or Wikipedia sense from which this gloss is taken</summary>
        [Newtonsoft.Json.JsonProperty("sourceSense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int SourceSense { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        /// <summary>The Gloss text</summary>
        [Newtonsoft.Json.JsonProperty("gloss", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Gloss1 { get; set; }
    
        /// <summary>A list of TokenIds. Each TokenId is the association between the lemma that appears in this Gloss, and the SynsetId that identifies the lemma in BabelNet.</summary>
        [Newtonsoft.Json.JsonProperty("tokens", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Token> Tokens { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Metadata related to a web-hosted image file.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Image 
    {
        /// <summary>The MediaWiki page name for this image.</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>The languages for this image.</summary>
        [Newtonsoft.Json.JsonProperty("languages", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Languages { get; set; }
    
        [Newtonsoft.Json.JsonProperty("urlSource", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string UrlSource { get; set; }
    
        /// <summary>The license for the Image.</summary>
        [Newtonsoft.Json.JsonProperty("license", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string License { get; set; }
    
        /// <summary>Gets the URL for the thumbnail image of this Image</summary>
        [Newtonsoft.Json.JsonProperty("thumbUrl", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ThumbUrl { get; set; }
    
        /// <summary>Gets the URL to the full-size image</summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }
    
        /// <summary>True if the image is bad to censored</summary>
        [Newtonsoft.Json.JsonProperty("badImage", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BadImage { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A list of language codes</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class LanguageList : System.Collections.ObjectModel.Collection<string>
    {
    
    }
    
    /// <summary>Models a semantic pointer in BabelNet. Includes an associative (i.e. semantically unspecified) relation.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Pointer 
    {
        /// <summary>A symbol that is used to indicate this pointer type.</summary>
        [Newtonsoft.Json.JsonProperty("fSymbol", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FSymbol { get; set; }
    
        /// <summary>User-friendly name of this pointer type</summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }
    
        /// <summary>A short-form name of this pointer type</summary>
        [Newtonsoft.Json.JsonProperty("shortName", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string ShortName { get; set; }
    
        [Newtonsoft.Json.JsonProperty("relationGroup", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PointerRelationGroup RelationGroup { get; set; }
    
        /// <summary>true if the relation is obtained from an automatic resource</summary>
        [Newtonsoft.Json.JsonProperty("isAutomatic", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool IsAutomatic { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Represents a single item in the collection of items returned by the GetSenses operation</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class GetSensesResponseItem 
    {
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SenseType Type { get; set; }
    
        [Newtonsoft.Json.JsonProperty("properties", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Sense Properties { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>Descriminates the subtype of the Sense object (e.g. BabelSense, WordNetSense)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SenseType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"BabelSense")]
        BabelSense = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"WordNetSense")]
        WordNetSense = 1,
    
    }
    
    /// <summary>Represents a single meaning of word (Synset) in BabelNet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Sense 
    {
        /// <summary>The full lemma for this sense</summary>
        [Newtonsoft.Json.JsonProperty("fullLemma", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string FullLemma { get; set; }
    
        /// <summary>Simplified lemma, with qualifications in paranthesis removed</summary>
        [Newtonsoft.Json.JsonProperty("simpleLemma", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SimpleLemma { get; set; }
    
        [Newtonsoft.Json.JsonProperty("lemma", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Lemma { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        /// <summary>the sensekey of the WordNet, Omega, Wikidata or Wiktionary sense to which this Sense corresponds, if any.</summary>
        [Newtonsoft.Json.JsonProperty("senseKey", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string SenseKey { get; set; }
    
        /// <summary>Discontinued. Gets the frequency score for this Sense. This score represents, for a Wikipedia page/redirection, the number of its incoming links. Otherwise it is null.</summary>
        [Newtonsoft.Json.JsonProperty("frequence", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Frequence { get; set; }
    
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Pos { get; set; }
    
        /// <summary>translation-related information. To be removed in future version.</summary>
        [Newtonsoft.Json.JsonProperty("translationInfo", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string TranslationInfo { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pronunciations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pronunciations Pronunciations { get; set; }
    
        [Newtonsoft.Json.JsonProperty("synsetID", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SynsetId SynsetID { get; set; }
    
        /// <summary>Returns true if it is a key sense</summary>
        [Newtonsoft.Json.JsonProperty("bKeySense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BKeySense { get; set; }
    
        /// <summary>The numberic id of the sense</summary>
        [Newtonsoft.Json.JsonProperty("idSense", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int IdSense { get; set; }
    
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Tags { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A subtype of Sense for senses sourced from WordNet</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WordNetSense : Sense
    {
        /// <summary>The sense number in WordNet</summary>
        [Newtonsoft.Json.JsonProperty("wordNetSenseNumber", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WordNetSenseNumber { get; set; }
    
        /// <summary>The offset of the Sense in WordNet</summary>
        [Newtonsoft.Json.JsonProperty("wordNetOffset", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string WordNetOffset { get; set; }
    
        /// <summary>The synset position of the Sense in WordNet</summary>
        [Newtonsoft.Json.JsonProperty("wordNetSynsetPosition", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double WordNetSynsetPosition { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A set of one or more synonyms</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Synset 
    {
        /// <summary>Sense objects associated with the Synset</summary>
        [Newtonsoft.Json.JsonProperty("senses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Sense> Senses { get; set; }
    
        /// <summary>WordNet offsets corresponding to this Synset</summary>
        [Newtonsoft.Json.JsonProperty("wnOffsets", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<SynsetId> WnOffsets { get; set; }
    
        /// <summary>Glosses associated with this Synset</summary>
        [Newtonsoft.Json.JsonProperty("glosses", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Gloss> Glosses { get; set; }
    
        /// <summary>A list of usage examples for this Synset</summary>
        [Newtonsoft.Json.JsonProperty("examples", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Examples { get; set; }
    
        /// <summary>A list of images associated with this Synset</summary>
        [Newtonsoft.Json.JsonProperty("images", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Image> Images { get; set; }
    
        [Newtonsoft.Json.JsonProperty("synsetType", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public SynsetType SynsetType { get; set; }
    
        /// <summary>A list of Wikipedia categories for this Synset</summary>
        [Newtonsoft.Json.JsonProperty("categories", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<WikipediaCategory> Categories { get; set; }
    
        /// <summary>Translations between senses found in this BabelSynset.</summary>
        [Newtonsoft.Json.JsonProperty("translations", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Translations { get; set; }
    
        /// <summary>A map of Domains to the importance of this Synset.</summary>
        [Newtonsoft.Json.JsonProperty("domains", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Domains { get; set; }
    
        /// <summary>The set of languages used in this Synset.</summary>
        [Newtonsoft.Json.JsonProperty("filterLangs", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> FilterLangs { get; set; }
    
        /// <summary>A list of tags associated with the Synset.</summary>
        [Newtonsoft.Json.JsonProperty("tags", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Tags { get; set; }
    
        /// <summary>True if the Synset is a key concept.</summary>
        [Newtonsoft.Json.JsonProperty("bKeyConcepts", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool BKeyConcepts { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>An object that identifies a Synset</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SynsetId 
    {
        /// <summary>The ID code of the Synset. `bn:` prefix represents a BabelNet synset. `wn:` prefix represents a WordNet synset.</summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pos", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public UniversalPOS Pos { get; set; }
    
        [Newtonsoft.Json.JsonProperty("source", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Source { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A class that models a relation to a Synset</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class SynsetRelation 
    {
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        [Newtonsoft.Json.JsonProperty("pointer", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pointer Pointer { get; set; }
    
        /// <summary>target id</summary>
        [Newtonsoft.Json.JsonProperty("target", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Target { get; set; }
    
        /// <summary>The weight of the Relation. To be removed in future version.</summary>
        [Newtonsoft.Json.JsonProperty("weight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double Weight { get; set; }
    
        /// <summary>the weight normalized across all relations of the same knowledge source. To be removed in future version.</summary>
        [Newtonsoft.Json.JsonProperty("normalizedWeight", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public double NormalizedWeight { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A kind of Synset, which can be one of the following:
    ///   - "CONCEPT": an abstraction or generalization from experience
    ///   - "NAMED_ENTITY": a word that clearly identifies one item
    ///   - "Unknown": a word that does not fit the other types
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum SynsetType
    {
        [System.Runtime.Serialization.EnumMember(Value = @"CONCEPT")]
        CONCEPT = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NAMED_ENTITY")]
        NAMED_ENTITY = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"UNKNOWN")]
        UNKNOWN = 2,
    
    }
    
    /// <summary>Represents the association between the word that appears in a Gloss and the SynsetId that identifies the lemma in BabelNet.</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Token 
    {
        /// <summary>The start index of the Token</summary>
        [Newtonsoft.Json.JsonProperty("start", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Start { get; set; }
    
        /// <summary>The end index of the Token</summary>
        [Newtonsoft.Json.JsonProperty("end", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int End { get; set; }
    
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SynsetId Id { get; set; }
    
        /// <summary>The word of this Token</summary>
        [Newtonsoft.Json.JsonProperty("word", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Word { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    /// <summary>A code representing a 'part of speech'. [Allowed values](https://babelnet.org/5.0/javadoc/it/uniroma1/lcl/jlt/util/UniversalPOS.html)</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum UniversalPOS
    {
        [System.Runtime.Serialization.EnumMember(Value = @"ADJ")]
        ADJ = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADJ_ADP")]
        ADJ_ADP = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADJ_PRON")]
        ADJ_PRON = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP")]
        ADP = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_ADJ")]
        ADP_ADJ = 4,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_ADP")]
        ADP_ADP = 5,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_CCONJ")]
        ADP_CCONJ = 6,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_DET")]
        ADP_DET = 7,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_NOUN")]
        ADP_NOUN = 8,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_NUM")]
        ADP_NUM = 9,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_PART")]
        ADP_PART = 10,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_PRON")]
        ADP_PRON = 11,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_PROPN")]
        ADP_PROPN = 12,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADP_X")]
        ADP_X = 13,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADV")]
        ADV = 14,
    
        [System.Runtime.Serialization.EnumMember(Value = @"ADV_PRON")]
        ADV_PRON = 15,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AUX")]
        AUX = 16,
    
        [System.Runtime.Serialization.EnumMember(Value = @"AUX_PRON")]
        AUX_PRON = 17,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ")]
        CCONJ = 18,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_ADJ")]
        CCONJ_ADJ = 19,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_ADP")]
        CCONJ_ADP = 20,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_ADV")]
        CCONJ_ADV = 21,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_AUX")]
        CCONJ_AUX = 22,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_CCONJ")]
        CCONJ_CCONJ = 23,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_DET")]
        CCONJ_DET = 24,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_INTJ")]
        CCONJ_INTJ = 25,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_NOUN")]
        CCONJ_NOUN = 26,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_NUM")]
        CCONJ_NUM = 27,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_PART")]
        CCONJ_PART = 28,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_PRON")]
        CCONJ_PRON = 29,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_PROPN")]
        CCONJ_PROPN = 30,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_VERB")]
        CCONJ_VERB = 31,
    
        [System.Runtime.Serialization.EnumMember(Value = @"CCONJ_X")]
        CCONJ_X = 32,
    
        [System.Runtime.Serialization.EnumMember(Value = @"DET")]
        DET = 33,
    
        [System.Runtime.Serialization.EnumMember(Value = @"INTJ")]
        INTJ = 34,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOUN")]
        NOUN = 35,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOUN_ADJ")]
        NOUN_ADJ = 36,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOUN_NOUN")]
        NOUN_NOUN = 37,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOUN_PRON")]
        NOUN_PRON = 38,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NOUN_PUNCT")]
        NOUN_PUNCT = 39,
    
        [System.Runtime.Serialization.EnumMember(Value = @"NUM")]
        NUM = 40,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PART")]
        PART = 41,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PART_ADJ")]
        PART_ADJ = 42,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PART_ADV")]
        PART_ADV = 43,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PART_AUX")]
        PART_AUX = 44,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PART_NOUN")]
        PART_NOUN = 45,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PART_PART")]
        PART_PART = 46,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PART_PRON")]
        PART_PRON = 47,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PART_VERB")]
        PART_VERB = 48,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRON")]
        PRON = 49,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRON_PRON")]
        PRON_PRON = 50,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PRON_VERB")]
        PRON_VERB = 51,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROPN")]
        PROPN = 52,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PROPN_DET")]
        PROPN_DET = 53,
    
        [System.Runtime.Serialization.EnumMember(Value = @"PUNCT")]
        PUNCT = 54,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SCONJ")]
        SCONJ = 55,
    
        [System.Runtime.Serialization.EnumMember(Value = @"SYM")]
        SYM = 56,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERB")]
        VERB = 57,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERB_ADP")]
        VERB_ADP = 58,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERB_ADV")]
        VERB_ADV = 59,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERB_NOUN")]
        VERB_NOUN = 60,
    
        [System.Runtime.Serialization.EnumMember(Value = @"VERB_PRON")]
        VERB_PRON = 61,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X")]
        X = 62,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_NOUN")]
        X_NOUN = 63,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_PRON")]
        X_PRON = 64,
    
        [System.Runtime.Serialization.EnumMember(Value = @"X_X")]
        X_X = 65,
    
    }
    
    /// <summary>Represents a Wikipedia category</summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class WikipediaCategory 
    {
        /// <summary>The name of the Wikipedia category</summary>
        [Newtonsoft.Json.JsonProperty("category", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Category { get; set; }
    
        /// <summary>The language of the Wikipedia category</summary>
        [Newtonsoft.Json.JsonProperty("language", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Language { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response 
    {
        [Newtonsoft.Json.JsonProperty("version", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Version { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Response2 
    {
        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public enum PointerRelationGroup
    {
        [System.Runtime.Serialization.EnumMember(Value = @"HOLONYM")]
        HOLONYM = 0,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HYPERNYM")]
        HYPERNYM = 1,
    
        [System.Runtime.Serialization.EnumMember(Value = @"HYPONYM")]
        HYPONYM = 2,
    
        [System.Runtime.Serialization.EnumMember(Value = @"MERONYM")]
        MERONYM = 3,
    
        [System.Runtime.Serialization.EnumMember(Value = @"OTHER")]
        OTHER = 4,
    
    }
    
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema", "10.0.22.0 (Newtonsoft.Json v11.0.0.0)")]
    public partial class Pronunciations 
    {
        [Newtonsoft.Json.JsonProperty("audios", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Audios { get; set; }
    
        [Newtonsoft.Json.JsonProperty("transcriptions", Required = Newtonsoft.Json.Required.DisallowNull, NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Transcriptions { get; set; }
    
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties = new System.Collections.Generic.Dictionary<string, object>();
    
        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties
        {
            get { return _additionalProperties; }
            set { _additionalProperties = value; }
        }
    
    
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception
    {
        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> Headers { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, System.Exception innerException) 
            : base(message + "\n\nStatus: " + statusCode + "\nResponse: \n" + response.Substring(0, response.Length >= 512 ? 512 : response.Length), innerException)
        {
            StatusCode = statusCode;
            Response = response; 
            Headers = headers;
        }

        public override string ToString()
        {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.0.5.0 (NJsonSchema v10.0.22.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException
    {
        public TResult Result { get; private set; }

        public ApiException(string message, int statusCode, string response, System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>> headers, TResult result, System.Exception innerException) 
            : base(message, statusCode, response, headers, innerException)
        {
            Result = result;
        }
    }

}

#pragma warning restore 1591
#pragma warning restore 1573
#pragma warning restore  472
#pragma warning restore  114
#pragma warning restore  108